#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
// надо было добавить все нужные библиотеки

#ifndef UTILS_H
#define UTILS_H

// проинициализировать функции
int custom_pow(int base, int power);
int isPrime(int n);
void F(int x);
size_t timer_from(unsigned char from);

#endif //UTILS_H


#include "utils.h"


size_t timer_from(unsigned char from) {
    size_t counter;
    for (unsigned char i = from; i > 0; --i) {
        ++counter;
        printf("%d\n",i);
    }
    return counter;
}


int custom_pow(int base, int power) //возвращает результат возведения base в степень pow
{
    int a = 0;
    a = pow(base,power);
    return a;
}

int isPrime(int n) //является ли число, поданное на вход, простым
{
    if (n > 1)
    {
        for (int i = 2; i < n; i++){
            if (n % i == 0){
                return 0;
            }
        }
        return 1;
    }
    else
        return 0;
}

void F(int x) //выводит через пробел все целые числа от 1 до n
{
    if (x > 1) F(x-1); 
    printf("%d ",x);
}


/*
size_t timer_from(unsigned char from) {
    size_t counter;
    for (unsigned char i = from; i >= 0; --i) надо убрать знак равно{
        ++counter;
        printf(i); не хватает "%d"
    }
    return counter;
}
*/



#include "utils.h"

#define ERR_ARGS_COUNT (-1)
#define ERR_WRONG_FLG (-2)

#define TST_FOO_FIX     1
#define TST_FOO_IMPL    2
#define TST_MOD_IMPL    3
#define TST_MMM_TRY     4


/* NOTE(stitaevskiy):
 * We use `atoi` function just for simplification and code reducing.
 * This function doesn't report conversation errors.
 * For safety program we recommend using `strtol` and its analogs.
 * (See `man atoi` and `man strtol` for more info).
*/ 
/*
const char str_num[] = "1234";
char* end = NULL;
int val = (int) strtol(str_num, &end, 0);
if (end != '\0') {
     //ERROR
}
*/

int main(int argc, const char** argv) {
    if (argc < 3) {
        return ERR_ARGS_COUNT;
    }

    int Test_case = atoi(argv[1]);
    const char* data;
    data = argv[2];

    switch (Test_case) {
        case TST_FOO_FIX: {
            int to = atoi(data);
            size_t ticks_count = timer_from(to);
            printf("%ld\n", ticks_count);
            break;
        }
        case TST_FOO_IMPL: {
            if (argc = 4) {
                int base = atoi(data);
                int power =  atoi(argv[3]);
                int res = custom_pow(base, power);    // TODO: Implement me

                printf("%i\n", res);
            } else {
                return ERR_ARGS_COUNT;
            }
            break;
        }
        case TST_MOD_IMPL: {
            int num = atoi(data);
            int res = isPrime(num);    
            printf("%i\n", res);
            break;
        }
        case TST_MMM_TRY: {
            int num = atoi(data);  
            F(num);   
            break;
        }
        default: {
            return ERR_WRONG_FLG;
        }
    }
}